# -*- org-confirm-babel-evaluate: nil; -*-
#+STARTUP: showeverything

* Imports
#+begin_src jupyter-python :results none
  import itertools
  import math
  from collections import defaultdict, Counter, deque

  import numpy as np

  from aoc.aoc import get_data, print_examples, INPUT_DIR
  from aoc.utils import *
#+end_src
* Load data
#+begin_src jupyter-python :var fn=(buffer-file-name) :results none
  lines, year, day, examples = get_data(fn)
#+end_src

#+begin_src jupyter-python
  print_examples(examples)
  example_fn = INPUT_DIR / f"{year}_{day}_test"
  if len(examples) == 0 and example_fn.is_file():
      with (example_fn).open() as f:
          test_lines = f.read().splitlines()

      for line in test_lines:
          print(line)
#+end_src

#+RESULTS:
: ------------------------------- Example data 1/1 -------------------------------
: 0 3 6 9 12 15
: 1 3 6 10 15 21
: 10 13 16 21 30 45
: --------------------------------------------------------------------------------
: answer_a: 114
: answer_b: -

* Main methods
#+begin_src jupyter-python :results none
  def solve(lines):
      p1, p2 = [], []
      for line in lines:
          histories = [[int(v) for v in line.split()]]
          while not all(h == 0 for h in histories[-1]):
              histories.append(diff_consecutive(histories[-1]))
          for i in reversed(range(len(histories) - 1)):
              histories[i].append(histories[i][-1] + histories[i+1][-1])
              histories[i].insert(0, histories[i][0] - histories[i+1][0])
          p1.append(histories[0][-1])
          p2.append(histories[0][0])
      return sum(p1), sum(p2)
#+end_src
* Test cases
#+begin_src jupyter-python
  for example in examples:
      ex_a, ex_b = solve(example.input_data.split("\n"))
      if ex_a is not None:
          print(ex_a)
          assert str(ex_a) == example.answer_a
      if ex_b is not None:
          print(ex_b)
          if example.answer_b is not None:
              assert str(ex_b) == example.answer_b
#+end_src

#+RESULTS:
: 114
: 2

* Get result
#+begin_src jupyter-python
  a1, a2 = solve(lines)
  print(a1)
  print(a2)
#+end_src

#+RESULTS:
: 1904165718
: 964
