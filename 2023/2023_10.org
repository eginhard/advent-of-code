# -*- org-confirm-babel-evaluate: nil; -*-
#+STARTUP: showeverything

* Imports
#+begin_src jupyter-python :results none
  from aoc.aoc import get_data, print_examples
  from aoc.utils import *
#+end_src
* Load data
#+begin_src jupyter-python :var fn=(buffer-file-name) :results none
  lines, year, day, examples = get_data(fn)
#+end_src

#+begin_src jupyter-python
  print_examples(examples)
  example_fn = INPUT_DIR / f"{year}_{day}_test"
  if len(examples) == 0 and example_fn.is_file():
      with (example_fn).open() as f:
          test_lines = f.read().splitlines()

      for line in test_lines:
          print(line)
#+end_src

#+RESULTS:
#+begin_example
  ------------------------------- Example data 1/6 -------------------------------
  .....
  .S-7.
  .|.|.
  .L-J.
  .....
  --------------------------------------------------------------------------------
  answer_a: 4
  answer_b: -
  ------------------------------- Example data 2/6 -------------------------------
  ..F7.
  .FJ|.
  SJ.L7
  |F--J
  LJ...
  --------------------------------------------------------------------------------
  answer_a: 8
  answer_b: -
  ------------------------------- Example data 3/6 -------------------------------
  ...........
  .S-------7.
  .|F-----7|.
  .||.....||.
  .||.....||.
  .|L-7.F-J|.
  .|..|.|..|.
  .L--J.L--J.
  ...........
  --------------------------------------------------------------------------------
  answer_a: -
  answer_b: 4
  ------------------------------- Example data 4/6 -------------------------------
  ..........
  .S------7.
  .|F----7|.
  .||OOOO||.
  .||OOOO||.
  .|L-7F-J|.
  .|II||II|.
  .L--JL--J.
  ..........
  --------------------------------------------------------------------------------
  answer_a: -
  answer_b: 4
  ------------------------------- Example data 5/6 -------------------------------
  .F----7F7F7F7F-7....
  .|F--7||||||||FJ....
  .||.FJ||||||||L7....
  FJL7L7LJLJ||LJ.L-7..
  L--J.L7...LJS7F-7L7.
  ....F-J..F7FJ|L7L7L7
  ....L7.F7||L7|.L7L7|
  .....|FJLJ|FJ|F7|.LJ
  ....FJL-7.||.||||...
  ....L---J.LJ.LJLJ...
  --------------------------------------------------------------------------------
  answer_a: -
  answer_b: 8
  ------------------------------- Example data 6/6 -------------------------------
  FF7FSF7F7F7F7F7F---7
  L|LJ||||||||||||F--J
  FL-7LJLJ||||||LJL-77
  F--JF--7||LJLJ7F7FJ-
  L---JF-JLJ.||-FJLJJ7
  |F|F-JF---7F7-L7L|7|
  |FFJF7L7F-JF7|JL---7
  7-L-JL7||F7|L7F-7F7|
  L.L7LFJ|||||FJL7||LJ
  L7JLJL-JLJLJL--JLJ.L
  --------------------------------------------------------------------------------
  answer_a: -
  answer_b: 10
#+end_example

* Main methods
#+begin_src jupyter-python :results none
  def follow(graph, start, nxt):
      """Follow the pipes until we're back at the start."""
      loop = []
      x, y = start
      while True:
          previous = (x, y)
          x, y = nxt
          loop.append((x, y))
          if (x, y) == start:
              return loop
          nxt = graph[(x, y)][1] if previous == graph[(x, y)][0] else graph[(x, y)][0]

  def get_directions(start):
      """Return a list of 8 surrounding directions, starting with the given one."""
      directions = [(1, 1), (1, 0), (1, -1), (0, -1), (-1, -1), (-1, 0), (-1, 1), (0, 1)]
      while directions[0] != start:
          directions.append(directions.pop(0))
      return directions

  def area(lines, graph, loop):
      sides = (set(), set())
      for i, (x, y) in enumerate(loop):
          xx = x - loop[i-1][0]
          yy = y - loop[i-1][1]
          match (xx, yy):
              case (1, 0):
                  dirs = get_directions((1, 1))
              case (0, -1):
                  dirs = get_directions((1, -1))
              case (-1, 0):
                  dirs = get_directions((-1, -1))
              case (0, 1):
                  dirs = get_directions((-1, 1))
          side = 0
          xx, yy = loop[i-1]
          for dx, dy in dirs:
              if not (0 <= xx+dx < len(lines) and 0 <= yy+dy < len(lines[0])):
                  continue
              if (xx+dx, yy+dy) not in loop:
                  sides[side].add((xx+dx, yy+dy))
              if (xx+dx, yy+dy) in graph[(xx, yy)]:
                  side = 1 - side
      rest = []
      for i, line in enumerate(lines):
          for j, _ in enumerate(line):
              # Some cells are not adjacent to the loop
              if (i, j) not in loop and (i, j) not in sides[0] | sides[1]:
                  rest.append((i, j))

      # Find out where the remaining cells belong
      while rest != []:
          i, j = rest.pop(0)
          neighbors = []
          for dx, dy in DIRECTIONS["8"]:
              for side in (0, 1):
                  if (i+dx, j+dy) in sides[side]:
                      neighbors.append(side)
          if len(neighbors) > 0:
              assert all(neighbors[0] == n for n in neighbors)
              sides[neighbors[0]].add((i, j))
          else:
              rest.append((i, j))
      return len(sides[0]), len(sides[1])

  def solve(lines):
      # Mark which cells are connected by pipes
      graph = {}
      for i, line in enumerate(lines):
          for j, c in enumerate(line):
              match c:
                  case "|":
                      graph[(i, j)] = [(i-1, j), (i+1, j)]
                  case "-":
                      graph[(i, j)] = [(i, j-1), (i, j+1)]
                  case "L":
                      graph[(i, j)] = [(i-1, j), (i, j+1)]
                  case "J":
                      graph[(i, j)] = [(i-1, j), (i, j-1)]
                  case "7":
                      graph[(i, j)] = [(i, j-1), (i+1, j)]
                  case "F":
                      graph[(i, j)] = [(i, j+1), (i+1, j)]
                  case "S":
                      graph[(i, j)] = []
                      start = (i, j)
      x, y = start
      dists = []
      for xx, yy in DIRECTIONS["4"]:
          if (x+xx, y+yy) not in graph or start not in graph[(x+xx, y+yy)]:
              continue
          loop = follow(graph, start, (x+xx, y+yy))
          dists.append(len(loop))
      graph[start] = [loop[0], loop[-2]]  # add connections of "S"
      assert len(dists) == 2 and dists[0] == dists[1]
      return dists[0] // 2, min(area(lines, graph, loop))
#+end_src
* Test cases
#+begin_src jupyter-python
  for example in examples:
      ex_a, ex_b = solve(example.input_data.split("\n"))
      if ex_a is not None:
          print(ex_a)
          if example.answer_a is not None:
              assert str(ex_a) == example.answer_a
      if ex_b is not None:
          print(ex_b)
          if example.answer_b is not None:
              assert str(ex_b) == example.answer_b
      print()
#+end_src

#+RESULTS:
#+begin_example
  4
  1

  8
  1

  23
  4

  22
  4

  70
  8

  80
  10
#+end_example

* Get result
#+begin_src jupyter-python
  a1, a2 = solve(lines)
  print(a1)
  print(a2)
#+end_src

#+RESULTS:
: 6927
: 467
