# -*- org-confirm-babel-evaluate: nil; -*-
#+STARTUP: showeverything

* Imports
#+begin_src jupyter-python :results none
  from collections import defaultdict

  from aoc.aoc import get_data, print_examples
  from aoc.utils import *
#+end_src
* Load data
#+begin_src jupyter-python :var fn=(buffer-file-name) :results none
  lines, year, day, examples = get_data(fn)
#+end_src

#+begin_src jupyter-python
  print_examples(examples)
#+end_src

#+RESULTS:
#+begin_example
  ------------------------------- Example data 1/1 -------------------------------
  .|...\....
  |.-.\.....
  .....|-...
  ........|.
  ..........
  .........\
  ..../.\\..
  .-.-/..|..
  .|....-|.\
  ..//.|....
  --------------------------------------------------------------------------------
  answer_a: 46
  answer_b: -
#+end_example

* Main methods
#+begin_src jupyter-python :results none
  mp = {
      "/": {
          (1, 0): (0, -1),
          (-1, 0): (0, 1),
          (0, 1): (-1, 0),
          (0, -1): (1, 0),
      },
      "\\": {
          (1, 0): (0, 1),
          (-1, 0): (0, -1),
          (0, 1): (1, 0),
          (0, -1): (-1, 0),
      }
  }

  def count(lines, stack):
      energized = defaultdict(list)
      while len(stack) > 0:
          (x, y), (xx, yy) = stack.pop(0)
          if not (0 <= x < len(lines) and 0 <= y < len(lines[0])):
              continue
          if (xx, yy) in energized[(x, y)]:
              continue
          energized[(x, y)].append((xx, yy))
          match lines[x][y]:
              case ".":
                  stack.append(((x + xx, y + yy), (xx, yy)))
              case "/":
                  xx, yy = mp["/"][(xx, yy)]
                  stack.append(((x + xx, y + yy), (xx, yy)))
              case "\\":
                  xx, yy = mp["\\"][(xx, yy)]
                  stack.append(((x + xx, y + yy), (xx, yy)))
              case "-":
                  if xx == 0:
                      stack.append(((x + xx, y + yy), (xx, yy)))
                  else:
                      stack.append(((x, y - 1), (0, -1)))
                      stack.append(((x, y + 1), (0, 1)))
              case "|":
                  if yy == 0:
                      stack.append(((x + xx, y + yy), (xx, yy)))
                  else:
                      stack.append(((x - 1, y), (-1, 0)))
                      stack.append(((x + 1, y), (1, 0)))
      return len(energized)

  def p1(lines):
      stack = [((0, 0), (0, 1))]
      return count(lines, stack)

  def p2(lines):
      counts = []
      for x in range(len(lines)):
          stack = [((x, 0), (0, 1))]
          counts.append(count(lines, stack))
          stack = [((x, len(lines[0]) - 1), (0, -1))]
          counts.append(count(lines, stack))
      for y in range(len(lines[0])):
          stack = [((0, y), (1, 0))]
          counts.append(count(lines, stack))
          stack = [((len(lines) - 1, y), (-1, 0))]
          counts.append(count(lines, stack))
      return max(counts)

  def solve(lines):
      return p1(lines), p2(lines)
#+end_src
* Test cases
#+begin_src jupyter-python
  for example in examples:
      ex_a, ex_b = solve(example.input_data.split("\n"))
      if ex_a is not None:
          print(ex_a)
          if example.answer_a is not None:
              assert str(ex_a) == example.answer_a
      if ex_b is not None:
          print(ex_b)
          if example.answer_b is not None:
              assert str(ex_b) == example.answer_b
      print()
#+end_src

#+RESULTS:
: 46
: 51
:

* Get result
#+begin_src jupyter-python
  a1, a2 = solve(lines)
  print(a1)
  print(a2)
#+end_src

#+RESULTS:
: 7482
: 7896
