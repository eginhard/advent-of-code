# -*- org-confirm-babel-evaluate: nil; -*-
#+STARTUP: showeverything
#+PROPERTY: header-args+ :kernel aoc

* Imports
#+begin_src jupyter-python :results none
  import itertools
  import math
  from collections import defaultdict, Counter, deque

  import numpy as np

  from aoc.aoc import get_data, print_examples, INPUT_DIR
  from aoc.utils import *
#+end_src

* Load data
#+begin_src jupyter-python :var fn=(buffer-file-name) :results none
  lines, year, day, examples = get_data(fn)
#+end_src

#+begin_src jupyter-python
  print_examples(examples)
  example_fn = INPUT_DIR / f"{year}_{day}_test"
  if len(examples) == 0 and example_fn.is_file():
      with (example_fn).open() as f:
          test_lines = f.read().splitlines()

      for line in test_lines:
          print(line)
#+end_src

#+RESULTS:
: ------------------------------- Example data 1/1 -------------------------------
: 3   4
: 4   3
: 2   5
: 1   3
: 3   9
: 3   3
: --------------------------------------------------------------------------------
: answer_a: 11
: answer_b: -

* Main methods
#+begin_src jupyter-python :results none
  def p12(lines):
      left, right = [], []
      for line in lines:
          l, r = line.strip().split()
          left.append(int(l))
          right.append(int(r))

      counter = Counter(right)
      left.sort()
      right.sort()

      p1, p2 = 0, 0
      for l, r in zip(left, right):
          p1 += abs(l - r)
          p2 += l * counter[l]
      return p1, p2

  def solve(lines):
      return p12(lines)
#+end_src
* Test cases
#+begin_src jupyter-python
  for example in examples:
      ex_a, ex_b = solve(example.input_data.split("\n"))
      if ex_a is not None:
          print(ex_a)
          if example.answer_a is not None:
              assert str(ex_a) == example.answer_a
      if ex_b is not None:
          print(ex_b)
          if example.answer_b is not None:
              assert str(ex_b) == example.answer_b
      print()
#+end_src

#+RESULTS:
: 11
: 31
:

* Get result
#+begin_src jupyter-python
  a1, a2 = solve(lines)
  print(a1)
  print(a2)
#+end_src

#+RESULTS:
: 2164381
: 20719933
