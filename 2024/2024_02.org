# -*- org-confirm-babel-evaluate: nil; -*-
#+STARTUP: showeverything
#+PROPERTY: header-args+ :kernel aoc

* Imports
#+begin_src jupyter-python :results none
  import itertools
  import math
  from collections import defaultdict, Counter, deque

  import numpy as np

  from aoc.aoc import get_data, print_examples, INPUT_DIR
  from aoc.utils import *
#+end_src
* Load data
#+begin_src jupyter-python :var fn=(buffer-file-name) :results none
  lines, year, day, examples = get_data(fn)
#+end_src

#+begin_src jupyter-python
  print_examples(examples)
  example_fn = INPUT_DIR / f"{year}_{day}_test"
  if len(examples) == 0 and example_fn.is_file():
      with (example_fn).open() as f:
          test_lines = f.read().splitlines()

      for line in test_lines:
          print(line)
#+end_src

#+RESULTS:
: 7 6 4 2 1
: 1 2 7 8 9
: 9 7 6 2 1
: 1 3 2 4 5
: 8 6 4 4 1
: 1 3 6 7 9

* Main methods
#+begin_src jupyter-python :results none
  def is_safe(levels: list[int]) -> bool:
      sign = levels[1] - levels[0]
      for i, level in enumerate(levels[1:], start=1):
          diff = level - levels[i-1]
          if abs(diff) < 1 or abs(diff) > 3:
              return False
          if (diff < 0 and sign > 0) or (diff > 0 and sign < 0):
              return False
      return True

  def solve(lines):
      p1, p2 = 0, 0
      for line in lines:
          levels = [int(x) for x in line.strip().split()]

          if is_safe(levels):
              p1 += 1

          for combinations in [levels, *itertools.combinations(levels, len(levels) - 1)]:
              if is_safe(combinations):
                  p2 += 1
                  break
      return p1, p2
#+end_src
* Test cases
#+begin_src jupyter-python
  for example in examples:
      ex_a, ex_b = solve(example.input_data.split("\n"))
      if ex_a is not None:
          print(ex_a)
          if example.answer_a is not None:
              assert str(ex_a) == example.answer_a
      if ex_b is not None:
          print(ex_b)
          if example.answer_b is not None:
              assert str(ex_b) == example.answer_b
      print()
#+end_src

#+RESULTS:

#+begin_src jupyter-python
  print(p1(test_lines))
  print(p2(test_lines))
#+end_src

#+RESULTS:
: 2
: 4

* Get result
#+begin_src jupyter-python
  a1, a2 = solve(lines)
  print(a1)
  print(a2)
#+end_src

#+RESULTS:
: 407
: 459
