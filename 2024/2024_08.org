# -*- org-confirm-babel-evaluate: nil; -*-
#+STARTUP: showeverything
#+PROPERTY: header-args+ :kernel aoc

* Imports
#+begin_src jupyter-python :results none
  import itertools
  import math
  from collections import defaultdict, Counter, deque

  import numpy as np

  from aoc.aoc import get_data, print_examples, INPUT_DIR
  from aoc.utils import *
#+end_src
* Load data
#+begin_src jupyter-python :var fn=(buffer-file-name) :results none
  lines, year, day, examples = get_data(fn)
#+end_src

#+begin_src jupyter-python
  print_examples(examples)
  example_fn = INPUT_DIR / f"{year}_{day}_test"
  if len(examples) == 0 or example_fn.is_file():
      with (example_fn).open() as f:
          test_lines = f.read().splitlines()

      for line in test_lines:
          print(line)
#+end_src

#+RESULTS:
#+begin_example
  ------------------------------- Example data 1/1 -------------------------------
  ............
  ........0...
  .....0......
  .......0....
  ....0.......
  ......A.....
  ............
  ............
  ........A...
  .........A..
  ............
  ............
  --------------------------------------------------------------------------------
  answer_a: 14
  answer_b: -
  T....#....
  ...T......
  .T....#...
  .........#
  ..#.......
  ..........
  ...#......
  ..........
  ....#.....
  ..........
#+end_example

* Main methods
#+begin_src jupyter-python :results none
  def solve(lines):
      antennas = defaultdict(list)
      for x, line in enumerate(lines):
          for y, char in enumerate(line):
              if char != ".":
                  antennas[char].append((x, y))
      p1, p2 = set(), set()
      for key in antennas:
          for (x1, y1), (x2, y2) in itertools.combinations(antennas[key], 2):
              dx = x2 - x1
              dy = y2 - y1
              for i, j in [(x1 - dx, y1 - dy), (x1 + 2 * dx, y1 + 2 * dy)]:
                  if is_inside_grid(lines, i, j):
                      p1.add((i, j))
              for sign in (1, -1):
                  i, j = x1, y1
                  while is_inside_grid(lines, i, j):
                      p2.add((i, j))
                      i += sign * dx
                      j += sign * dy
      return len(p1), len(p2)
#+end_src
* Test cases
#+begin_src jupyter-python
  solve(test_lines)
#+end_src

#+RESULTS:
| 8 | 12 |

#+begin_src jupyter-python
  for example in examples:
      ex_a, ex_b = solve(example.input_data.split("\n"))
      if ex_a is not None:
          print(ex_a)
          # if example.answer_a is not None:
          #     assert str(ex_a) == example.answer_a
      if ex_b is not None:
          print(ex_b)
          # if example.answer_b is not None:
          #     assert str(ex_b) == example.answer_b
      print()
#+end_src

#+RESULTS:
: 14
: 34
:

* Get result
#+begin_src jupyter-python
  a1, a2 = solve(lines)
  print(a1)
  print(a2)
#+end_src

#+RESULTS:
: 367
: 1285
