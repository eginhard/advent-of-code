# -*- org-confirm-babel-evaluate: nil; -*-
#+STARTUP: showeverything
#+PROPERTY: header-args+ :kernel aoc

* Imports
#+begin_src jupyter-python :results none
  import itertools
  import math
  from collections import defaultdict, Counter, deque

  import numpy as np

  from aoc.aoc import get_data, print_examples, INPUT_DIR
  from aoc.utils import *
#+end_src
* Load data
#+begin_src jupyter-python :var fn=(buffer-file-name) :results none
  lines, year, day, examples = get_data(fn)
#+end_src

#+begin_src jupyter-python
  print_examples(examples)
  example_fn = INPUT_DIR / f"{year}_{day}_test"
  if len(examples) == 0 and example_fn.is_file():
      with (example_fn).open() as f:
          test_lines = f.read().splitlines()

      for line in test_lines:
          print(line)
#+end_src

#+RESULTS:
#+begin_example
  ------------------------------- Example data 1/1 -------------------------------
  p=0,4 v=3,-3
  p=6,3 v=-1,-3
  p=10,3 v=-1,2
  p=2,0 v=2,-1
  p=0,0 v=1,3
  p=3,0 v=-2,-2
  p=7,6 v=-1,-3
  p=3,0 v=-1,-2
  p=9,3 v=2,3
  p=7,3 v=-1,2
  p=2,4 v=2,-3
  p=9,5 v=-3,-3
  --------------------------------------------------------------------------------
  answer_a: 103
  answer_b: -
#+end_example

* Main methods
#+begin_src jupyter-python :results none
  def solve(lines, w=101, h=103, times=100):
      robots = []
      for line in lines:
          robots.append(map(int, re.findall(r"-?\d+", line)))
      for t in range(times):
          pos = set()
          neighbours = 0
          for i, (x, y, dx, dy) in enumerate(robots):
              robots[i] = (x + dx) % w, (y + dy) % h, dx, dy
              pos.add((robots[i][0], robots[i][1]))
          for i, (x, y, _, _) in enumerate(robots):
              for dx, dy in DIRECTIONS["8"]:
                  if ((x+dx) % w, (y+dy) % h) in pos:
                      neighbours += 1
          if neighbours >= 1000:
              return t+1
      quadrants = [0, 0, 0, 0]
      for x, y, _, _ in robots:
          if x < (w - 1) / 2:
              if y < (h - 1) / 2: quadrants[0] += 1
              if y > (h - 1) / 2: quadrants[1] += 1
          if x > (w - 1) / 2:
              if y < (h - 1) / 2: quadrants[2] += 1
              if y > (h - 1) / 2: quadrants[3] += 1
      return math.prod(quadrants)
#+end_src
* Test cases
#+begin_src jupyter-python
  for example in examples:
      ex_a = solve(example.input_data.split("\n"), w=11, h=7)
      if ex_a is not None:
          print(ex_a)
          # if example.answer_a is not None:
          #     assert str(ex_a) == example.answer_a
      if ex_b is not None:
          print(ex_b)
          # if example.answer_b is not None:
          #     assert str(ex_b) == example.answer_b
      print()
#+end_src

#+RESULTS:
: 12
:

* Get result
#+begin_src jupyter-python
  a1 = solve(lines)
  a2 = solve(lines, times=10000)
  print(a1)
  print(a2)

  # p1(lines, times=100000)
#+end_src

#+RESULTS:
: 236628054
: 7584
