# -*- org-confirm-babel-evaluate: nil; -*-
#+STARTUP: showeverything
#+PROPERTY: header-args+ :kernel aoc

* Imports
#+begin_src jupyter-python :results none
  import itertools
  import math
  from collections import defaultdict, Counter, deque

  import networkx as nx
  import numpy as np

  from aoc.aoc import get_data, print_examples, INPUT_DIR
  from aoc.utils import *
#+end_src
* Load data
#+begin_src jupyter-python :var fn=(buffer-file-name) :results none
  lines, year, day, examples = get_data(fn)
#+end_src

#+begin_src jupyter-python
  print_examples(examples)
  example_fn = INPUT_DIR / f"{year}_{day}_test"
  if len(examples) == 0 and example_fn.is_file():
      with (example_fn).open() as f:
          test_lines = f.read().splitlines()

      for line in test_lines:
          print(line)
#+end_src

* Main methods
#+begin_src jupyter-python :results none
  def solve(lines):
      G = nx.Graph()
      network = defaultdict(set)
      for line in lines:
          a, b = line.split("-")
          G.add_edge(a, b)
          network[a].add(b)
          network[b].add(a)

      triples = set()
      for pc, connections in network.items():
          for a, b in itertools.combinations(connections, 2):
              if b in network[a] and "t" in (pc[0], a[0], b[0]):
                  triples.add(tuple(sorted([pc, a, b])))
      p1 = len(triples)

      cache = {}
      def find_network(linked: tuple[str]):
          if linked in cache:
              return cache[linked]
          sets = set()
          sets.add(linked)
          for other in network[linked[-1]]:
              if other in linked:
                  continue
              if all([other in network[pc] for pc in linked]):
                  sets.add(find_network(tuple(sorted([*linked, other]))))
          longest = max(sets, key=len)
          cache[linked] = longest
          return longest

      sets = set()
      for pc, connections in network.items():
          sets.add(find_network((pc,)))
      p2 = max(sets, key=len)
      assert p2 == tuple(sorted(max(nx.find_cliques(G), key=len)))
      return p1, ",".join(p2)
#+end_src
* Test cases
#+begin_src jupyter-python
  for example in examples:
      ex_a, ex_b = solve(example.input_data.split("\n"))
      if ex_a is not None:
          print(ex_a)
          # if example.answer_a is not None:
          #     assert str(ex_a) == example.answer_a
      if ex_b is not None:
          print(ex_b)
          # if example.answer_b is not None:
          #     assert str(ex_b) == example.answer_b
      print()
#+end_src

* Get result
#+begin_src jupyter-python
  a1, a2 = solve(lines)
  print(a1)
  print(a2)
#+end_src
